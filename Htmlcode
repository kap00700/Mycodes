import csv

class CSVToHTMLConverter:
    def __init__(self, csv_file_path):
        self.csv_file_path = csv_file_path

    def generate_html_table(self):
        html_output = "<html><body><table style='border-collapse: collapse; width: 50%;'>\n"
        
        with open(self.csv_file_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile)
            
            # Header row style
            header_style = "height: 30px; border: 1px solid rgb(204, 204, 204); background-color: rgb(201, 218, 248);"
            header_cell_style = "overflow: hidden; padding: 2px 3px; vertical-align: middle; font-family: 'Georgia', serif"
            
            # Data row style
            row_style = "height: 30px; border: 1px solid rgb(204, 204, 204);"
            cell_style = "overflow: hidden; padding: 2px 3px; vertical-align: top; font-family: 'Verdana', sans-serif;"
            
            # Generate header row with style
            headers = next(reader)
            html_output += f"<tr style='{header_style}'>" + "".join([f"<td style='{header_cell_style}'>{header}</td>" for header in headers]) + "</tr>\n"
            
            # Generate data rows with style
            for row in reader:
                html_output += f"<tr style='{row_style}'>" + "".join([f"<td style='{cell_style}'>{cell}</td>" for cell in row]) + "</tr>\n"
        
        html_output += "</table></body></html>"
        return html_output

    def save_html(self, output_file_path="output.html"):
        html_content = self.generate_html_table()
        with open(output_file_path, "w", encoding='utf-8') as html_file:
            html_file.write(html_content)
        print(f"HTML table generated and saved to '{output_file_path}'.")

# Example usage:
csv_file_path = "/mnt/data/file-5hlej2JD22c2iyC1zYDpqaWg"  # Update with your CSV file path
converter = CSVToHTMLConverter(csv_file_path)
converter.save_html("/mnt/data/output.html")