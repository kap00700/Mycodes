import csv

class CSVToHTMLConverter:
    def __init__(self, csv_file_path):
        self.csv_file_path = csv_file_path

    def generate_html_table(self):
        html_output = """
        <table cellspacing="0" cellpadding="0" dir="ltr" border="1" style="table-layout:fixed; width:0px; border-collapse:collapse; border:none">
            <colgroup>
        """
        
        try:
            with open(self.csv_file_path, 'r', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                
                # Generate headers and determine the number of columns
                headers = next(reader)  # Get the header row
                
                # Create col elements for each column
                for _ in headers:
                    html_output += '<col width="300">\n'  # Adjust the width as needed

                html_output += "</colgroup>\n<tbody>\n"
                
                # Header row style
                header_style = "height: 30px; border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204);"
                header_cell_style = "overflow: hidden; padding: 2px 3px; vertical-align: middle; background-color: rgb(201, 218, 248); font-family: 'Georgia', serif;"
                
                # Data row style
                row_style = "height: 30px; border-width: 1px; border-style: solid; border-color: rgb(204, 204, 204);"
                cell_style = "overflow: hidden; padding: 2px 3px; vertical-align: top; font-family: 'Verdana', sans-serif;"

                # Generate header row with style
                html_output += f"<tr style='{header_style}'>" + "".join(
                    [f"<td style='{header_cell_style}'>{header}</td>" for header in headers]
                ) + "</tr>\n"
                
                # Generate data rows with style
                for row in reader:
                    html_output += f"<tr style='{row_style}'>" + "".join(
                        [f"<td style='{cell_style}'><font face='Verdana, sans-serif'>{cell}</font></td>" for cell in row]
                    ) + "</tr>\n"
        
        except FileNotFoundError:
            return f"Error: The file '{self.csv_file_path}' does not exist."
        except Exception as e:
            return f"An error occurred: {str(e)}"

        html_output += """
            </tbody>
        </table>
        <br>
        """
        return html_output

    def save_html(self, output_file_path="output.html"):
        html_content = self.generate_html_table()
        
        if "Error" in html_content:  # Check for errors in HTML generation
            print(html_content)
            return
        
        try:
            with open(output_file_path, "w", encoding='utf-8') as html_file:
                html_file.write(html_content)
            print(f"HTML table generated and saved to '{output_file_path}'.")
        except Exception as e:
            print(f"Error saving HTML file: {str(e)}")

# Example usage:
csv_file_path = "/mnt/data/file-5hlej2JD22c2iyC1zYDpqaWg"  # Update with your CSV file path
converter = CSVToHTMLConverter(csv_file_path)
converter.save_html("/mnt/data/output.html")  # Specify the output path as needed